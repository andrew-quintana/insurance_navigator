
services:
  postgres:
    image: pgvector/pgvector:pg15
    environment:
      POSTGRES_DB: accessa_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/integration_schema_setup.sql:/docker-entrypoint-initdb.d/01_integration_schema.sql
      - ./sql/rls_policies.sql:/docker-entrypoint-initdb.d/02_rls_policies.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  api-server:
    build:
      context: .
      dockerfile: config/docker/Dockerfile
    ports:
      - "8000:8000"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/accessa_dev
      LLAMAPARSE_API_URL: http://mock-llamaparse:8001
      OPENAI_API_URL: http://mock-openai:8002
      STORAGE_TYPE: local
      LOCAL_STORAGE_PATH: /app/storage
    volumes:
      - ./mock_storage:/app/storage
      - ./mock_storage:/app/mock_storage
    depends_on:
      postgres:
        condition: service_healthy
      mock-llamaparse:
        condition: service_healthy
      mock-openai:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  enhanced-base-worker:
    build:
      context: .
      dockerfile: config/docker/Dockerfile
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/accessa_dev
      LLAMAPARSE_API_URL: http://mock-llamaparse:8001
      OPENAI_API_URL: http://mock-openai:8002
      STORAGE_TYPE: local
      LOCAL_STORAGE_PATH: /app/storage
    volumes:
      - ./mock_storage:/app/storage
      - ./mock_storage:/app/mock_storage
    depends_on:
      postgres:
        condition: service_healthy
      mock-llamaparse:
        condition: service_healthy
      mock-openai:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import sys; sys.exit(0)"]
      interval: 30s
      timeout: 10s
      retries: 3

  mock-llamaparse:
    build:
      context: ./testing/mocks
      dockerfile: llamaparse.Dockerfile
    ports:
      - "8001:8001"
    environment:
      MOCK_LLAMAPARSE_DELAY: 2
      MOCK_LLAMAPARSE_FAILURE_RATE: 0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  mock-openai:
    build:
      context: ./testing/mocks
      dockerfile: openai.Dockerfile
    ports:
      - "8002:8002"
    environment:
      MOCK_OPENAI_DELAY: 0.5
      MOCK_OPENAI_FAILURE_RATE: 0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  local-storage:
    image: alpine:latest
    volumes:
      - ./mock_storage:/storage
    command: ["tail", "-f", "/dev/null"]

  monitoring:
    build:
      context: .
      dockerfile: config/docker/Dockerfile
    ports:
      - "8004:8004"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/accessa_dev
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  agent-api:
    build:
      context: .
      dockerfile: Dockerfile.agent-api
    ports:
      - "8003:8003"
    environment:
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/accessa_dev
      OPENAI_API_URL: http://mock-openai:8002
      UPLOAD_PIPELINE_SCHEMA: upload_pipeline
      AGENT_ENVIRONMENT: development
    depends_on:
      postgres:
        condition: service_healthy
      mock-openai:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
