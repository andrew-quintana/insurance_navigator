"""
Centralized UUID generation utilities for consistent strategy across the system.

This module implements deterministic UUID generation using UUIDv5 to ensure
consistency between upload endpoints and processing workers, resolving the
critical pipeline failure identified in RCA002.

Reference: RFC001_UUID_STANDARDIZATION.md
"""

import uuid


# System namespace UUID for deterministic generation
# This must match the namespace used in backend/workers/base_worker.py
SYSTEM_NAMESPACE = uuid.UUID('6c8a1e6e-1f0b-4aa8-9f0a-1a7c2e6f2b42')


class UUIDGenerator:
    """
    Centralized UUID generation for consistent strategy across system.
    
    This class provides deterministic UUID generation methods that ensure
    consistency between upload endpoints and processing workers, resolving
    the critical pipeline failure where workers cannot find documents
    created by upload endpoints.
    """
    
    @staticmethod
    def document_uuid(user_id: str, content_hash: str) -> str:
        """
        Generate deterministic document UUID based on user and content.
        
        Args:
            user_id: The authenticated user's ID
            content_hash: SHA256 hash of the document content
            
        Returns:
            Deterministic UUIDv5 string
            
        Example:
            >>> UUIDGenerator.document_uuid("user123", "abc123...")
            "f47ac10b-58cc-4372-a567-0e02b2c3d479"
        """
        canonical = f"{user_id}:{content_hash}"
        return str(uuid.uuid5(SYSTEM_NAMESPACE, canonical))
    
    @staticmethod
    def chunk_uuid(document_id: str, chunker: str, version: str, ordinal: int) -> str:
        """
        Generate deterministic chunk UUID based on document and position.
        
        Args:
            document_id: The parent document's UUID
            chunker: Name of the chunking algorithm
            version: Version of the chunking algorithm
            ordinal: Position of the chunk within the document
            
        Returns:
            Deterministic UUIDv5 string
            
        Example:
            >>> UUIDGenerator.chunk_uuid("doc-uuid", "markdown", "1.0", 0)
            "6ba7b810-9dad-11d1-80b4-00c04fd430c8"
        """
        canonical = f"{document_id}:{chunker}:{version}:{ordinal}"
        return str(uuid.uuid5(SYSTEM_NAMESPACE, canonical))
    
    @staticmethod
    def job_uuid() -> str:
        """
        Generate random job UUID for ephemeral tracking.
        
        Job UUIDs can remain random as they are used for temporary
        tracking and don't need to be deterministic.
        
        Returns:
            Random UUIDv4 string
        """
        return str(uuid.uuid4())
    
    @staticmethod
    def validate_uuid_format(uuid_string: str) -> bool:
        """
        Validate that a string is a properly formatted UUID.
        
        Args:
            uuid_string: String to validate
            
        Returns:
            True if valid UUID format, False otherwise
        """
        try:
            uuid.UUID(uuid_string)
            return True
        except (ValueError, TypeError):
            return False
    
    @staticmethod
    def is_deterministic_uuid(uuid_string: str) -> bool:
        """
        Check if a UUID was generated using our deterministic method.
        
        This is a basic check - in practice, we can't distinguish UUIDv5
        from UUIDv4 without additional metadata, but this method can be
        extended for validation purposes.
        
        Args:
            uuid_string: UUID string to check
            
        Returns:
            True if the UUID appears to be deterministic (basic validation)
        """
        if not UUIDGenerator.validate_uuid_format(uuid_string):
            return False
        
        # Basic validation - in practice, we'd need to track generation method
        # For now, we assume all UUIDs generated by this class are deterministic
        return True
    
    @staticmethod
    def get_namespace() -> str:
        """
        Get the system namespace UUID as a string.
        
        Returns:
            System namespace UUID string
        """
        return str(SYSTEM_NAMESPACE)


# Convenience functions for backward compatibility
def generate_document_id(user_id: str, content_hash: str) -> str:
    """Convenience function for document UUID generation."""
    return UUIDGenerator.document_uuid(user_id, content_hash)


def generate_chunk_id(document_id: str, chunker: str, version: str, ordinal: int) -> str:
    """Convenience function for chunk UUID generation."""
    return UUIDGenerator.chunk_uuid(document_id, chunker, version, ordinal)


def generate_job_id() -> str:
    """Convenience function for job UUID generation."""
    return UUIDGenerator.job_uuid()
