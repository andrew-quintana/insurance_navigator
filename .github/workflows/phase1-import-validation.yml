name: Phase 1 Import Management Validation

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'core/**'
      - 'agents/**'
      - 'scripts/validate_imports.py'
      - 'scripts/migrate_agents_to_di.py'
      - 'test_phase1_imports.py'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'core/**'
      - 'agents/**'
      - 'scripts/validate_imports.py'
      - 'scripts/migrate_agents_to_di.py'
      - 'test_phase1_imports.py'

jobs:
  import-validation:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-backend.txt
        pip install pytest pytest-asyncio
    
    - name: Run Phase 1 Import Tests
      run: |
        python test_phase1_imports.py --verbose
    
    - name: Run Import Validation
      run: |
        python scripts/validate_imports.py --check-circular --check-psycopg2 --verbose
    
    - name: Test Agent Migration Script
      run: |
        python scripts/migrate_agents_to_di.py --dry-run --verbose
    
    - name: Test Core Module Initialization
      run: |
        python -c "
        import asyncio
        from core import initialize_system, close_system
        
        async def test_init():
            try:
                system = await initialize_system()
                health = await system.health_check()
                print(f'System health: {health}')
                await close_system()
                print('‚úÖ Core system initialization test passed')
            except Exception as e:
                print(f'‚ùå Core system initialization test failed: {e}')
                raise
        
        asyncio.run(test_init())
        "
    
    - name: Check for psycopg2 usage
      run: |
        if grep -r "import psycopg2\|from psycopg2" core/ agents/ --exclude-dir=__pycache__; then
          echo "‚ùå Found psycopg2 usage in core/agents modules - should use asyncpg"
          exit 1
        else
          echo "‚úÖ No psycopg2 usage found in core/agents modules"
        fi
    
    - name: Validate Import Resolution
      run: |
        python -c "
        import sys
        import importlib.util
        
        # Test critical imports
        critical_modules = [
            'core',
            'core.database',
            'core.agent_integration',
            'agents.base_agent'
        ]
        
        for module_name in critical_modules:
            try:
                spec = importlib.util.find_spec(module_name)
                if spec is None:
                    print(f'‚ùå Cannot find module: {module_name}')
                    sys.exit(1)
                print(f'‚úÖ Module found: {module_name}')
            except Exception as e:
                print(f'‚ùå Error importing {module_name}: {e}')
                sys.exit(1)
        
        print('‚úÖ All critical modules can be imported')
        "
    
    - name: Test Database Manager
      run: |
        python -c "
        from core.database import DatabaseManager, create_database_config
        
        # Test configuration creation
        config = create_database_config()
        print(f'‚úÖ Database config created: {config.host}:{config.port}')
        
        # Test database manager creation
        db_manager = DatabaseManager(config)
        print('‚úÖ Database manager created successfully')
        "
    
    - name: Test Agent Integration
      run: |
        python -c "
        from core.agent_integration import AgentIntegrationManager, AgentConfig
        from core.database import DatabaseManager, create_database_config
        
        # Test agent integration manager creation
        config = create_database_config()
        db_manager = DatabaseManager(config)
        agent_config = AgentConfig(use_mock=True)
        agent_manager = AgentIntegrationManager(db_manager, agent_config)
        
        print('‚úÖ Agent integration manager created successfully')
        "

  circular-dependency-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-backend.txt
        pip install pytest pytest-asyncio
    
    - name: Check for circular dependencies
      run: |
        python scripts/validate_imports.py --check-circular --verbose
        if [ $? -ne 0 ]; then
          echo "‚ùå Circular dependencies detected"
          exit 1
        else
          echo "‚úÖ No circular dependencies found"
        fi

  psycopg2-migration-check:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-backend.txt
    
    - name: Check for psycopg2 usage
      run: |
        python scripts/validate_imports.py --check-psycopg2 --verbose
        if [ $? -ne 0 ]; then
          echo "‚ùå psycopg2 usage found - migration needed"
          exit 1
        else
          echo "‚úÖ No psycopg2 usage found"
        fi

  integration-test:
    runs-on: ubuntu-latest
    needs: [import-validation, circular-dependency-check, psycopg2-migration-check]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-backend.txt
        pip install pytest pytest-asyncio
    
    - name: Run comprehensive integration test
      run: |
        python -c "
        import asyncio
        import logging
        
        logging.basicConfig(level=logging.INFO)
        
        async def integration_test():
            try:
                from core import initialize_system, close_system, get_database, get_agents
                
                print('üîÑ Initializing system...')
                system = await initialize_system()
                
                print('üîÑ Testing database manager...')
                db = await get_database()
                health = await db.health_check()
                print(f'Database health: {health}')
                
                print('üîÑ Testing agent integration...')
                agents = await get_agents()
                agent_health = await agents.health_check()
                print(f'Agent integration health: {agent_health}')
                
                print('üîÑ Testing system health...')
                system_health = await system.health_check()
                print(f'System health: {system_health}')
                
                print('üîÑ Shutting down system...')
                await close_system()
                
                print('‚úÖ Integration test completed successfully')
                
            except Exception as e:
                print(f'‚ùå Integration test failed: {e}')
                import traceback
                traceback.print_exc()
                raise
        
        asyncio.run(integration_test())
        "
