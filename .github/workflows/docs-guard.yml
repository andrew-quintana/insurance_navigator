name: Documentation Contract Guard

on:
  pull_request:
    paths:
      - 'docs/**'
      - '.github/workflows/docs-guard.yml'
      - 'tools/validate_docs.py'
  push:
    branches: [ main, master ]
    paths:
      - 'docs/**'

jobs:
  validate-docs:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Check documentation structure
      run: |
        echo "üîç Checking documentation contract compliance..."
        
        # Verify required directories exist
        REQUIRED_DIRS=("docs/initiatives" "docs/knowledge" "docs/summaries/rollups" "docs/meta")
        for dir in "${REQUIRED_DIRS[@]}"; do
          if [ ! -d "$dir" ]; then
            echo "‚ùå Missing required directory: $dir"
            exit 1
          fi
        done
        
        # Verify required files exist  
        REQUIRED_FILES=(
          "docs/README.md"
          "docs/DOCS_POLICY.md" 
          "docs/DOCS_READINESS_CHECKLIST.md"
          "docs/knowledge/ADJACENT_INDEX.md"
          "docs/meta/adjacency.json"
          "docs/meta/search_config.json"
          "docs/meta/CLAUDE_CODE_SYSTEM_PROMPT.md"
        )
        
        for file in "${REQUIRED_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Missing required file: $file"
            exit 1
          fi
        done
        
        echo "‚úÖ Documentation structure validation passed"
        
    - name: Validate adjacency.json syntax
      run: |
        echo "üîç Validating adjacency.json syntax..."
        python -m json.tool docs/meta/adjacency.json > /dev/null
        echo "‚úÖ adjacency.json syntax is valid"
        
    - name: Validate search_config.json syntax
      run: |
        echo "üîç Validating search_config.json syntax..."
        python -m json.tool docs/meta/search_config.json > /dev/null
        echo "‚úÖ search_config.json syntax is valid"
        
    - name: Run documentation contract validator
      run: |
        echo "üîç Running comprehensive documentation validation..."
        
        if [ -f "tools/validate_docs.py" ]; then
          python tools/validate_docs.py
        else
          echo "‚ö†Ô∏è  Documentation validator not found"
          echo "This repository may not have the full documentation contract system installed"
        fi
        
    - name: Check initiative completeness
      run: |
        echo "üîç Checking initiative file completeness..."
        
        # Find all initiative serials
        SERIALS=$(find docs/initiatives -name "*.md" | grep -E "(CONTEXT|PRD|RFC|TODO)[0-9]{3}\.md" | sed -E 's/.*\/(CONTEXT|PRD|RFC|TODO)([0-9]{3})\.md$/\2/' | sort -u)
        
        if [ -z "$SERIALS" ]; then
          echo "‚ÑπÔ∏è  No initiatives found"
          exit 0
        fi
        
        ALL_COMPLETE=true
        for SERIAL in $SERIALS; do
          echo "  Checking initiative $SERIAL..."
          
          REQUIRED_FILES=("CONTEXT${SERIAL}.md" "PRD${SERIAL}.md" "RFC${SERIAL}.md" "TODO${SERIAL}.md")
          MISSING_FILES=()
          
          for FILE in "${REQUIRED_FILES[@]}"; do
            if [ ! -f "docs/initiatives/${FILE}" ]; then
              MISSING_FILES+=("${FILE}")
            fi
          done
          
          if [ ${#MISSING_FILES[@]} -gt 0 ]; then
            echo "‚ùå Initiative ${SERIAL} incomplete - missing: ${MISSING_FILES[*]}"
            ALL_COMPLETE=false
          else
            echo "‚úÖ Initiative ${SERIAL} complete"
          fi
        done
        
        if [ "$ALL_COMPLETE" = false ]; then
          echo ""
          echo "‚ùå Some initiatives are incomplete!"
          echo "Use scripts/scaffold_initiative.sh to create missing files"
          exit 1
        fi
        
        echo "‚úÖ All initiatives are complete"
        
    - name: Validate Cursor rules configuration
      run: |
        echo "üîç Checking Cursor rules configuration..."
        
        if [ -f ".cursor/rules.mdc" ]; then
          # Basic syntax check - ensure it's valid YAML-like structure
          if grep -q "version:" ".cursor/rules.mdc" && grep -q "policies:" ".cursor/rules.mdc"; then
            echo "‚úÖ Cursor rules.mdc appears valid"
          else
            echo "‚ùå Cursor rules.mdc may have syntax issues"
            exit 1
          fi
        else
          echo "‚ö†Ô∏è  .cursor/rules.mdc not found - Cursor integration not configured"
        fi
        
    - name: Summary
      run: |
        echo ""
        echo "üéâ Documentation Contract Guard Summary:"
        echo "‚úÖ Directory structure validated"
        echo "‚úÖ Required files present" 
        echo "‚úÖ JSON configuration files valid"
        echo "‚úÖ Initiative completeness verified"
        echo "‚úÖ Tool integration configured"
        echo ""
        echo "üìã Documentation contract system is properly configured!"
        echo "üîß Tools available:"
        echo "   - scripts/scaffold_initiative.sh - Create new initiatives"
        echo "   - tools/validate_docs.py - Validate documentation"
        echo "   - .cursor/rules.mdc - Cursor IDE integration"
        echo "   - docs/meta/CLAUDE_CODE_SYSTEM_PROMPT.md - Claude Code integration"