#!/usr/bin/env python3
"""
FM-027: Worker Path Mismatch Test
Test if the worker can access files using the paths generated by our fix
"""

import asyncio
import httpx
import json
import uuid
from datetime import datetime
from io import BytesIO

# Staging configuration
SUPABASE_URL = "https://dfgzeastcxnoqshgyotp.supabase.co"
SERVICE_ROLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImRmZ3plYXN0Y3hub3FzaGd5b3RwIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1MTY4MDQ4MywiZXhwIjoyMDY3MjU2NDgzfQ.yYQWEJkDtvFXg-F2Xe4mh9Xj_0QCp6gnXkDI6lEhDT8"

async def test_worker_path_access():
    """Test if worker can access files using generated paths"""
    
    print("üîç FM-027: Worker Path Access Test")
    print("=" * 50)
    
    # Test data
    test_user_id = "be18f14d-4815-422f-8ebd-bfa044c33953"
    test_document_id = str(uuid.uuid4())
    test_filename = "test_worker_access.pdf"
    
    print(f"Test User ID: {test_user_id}")
    print(f"Test Document ID: {test_document_id}")
    print(f"Test Filename: {test_filename}")
    
    # Step 1: Generate storage path using our fixed function
    print("\n1Ô∏è‚É£ GENERATING STORAGE PATH")
    print("-" * 40)
    
    import sys
    sys.path.append('.')
    from api.upload_pipeline.utils.upload_pipeline_utils import generate_storage_path
    
    generated_path = generate_storage_path(test_user_id, test_document_id, test_filename)
    print(f"Generated path: {generated_path}")
    
    # Step 2: Upload file to storage
    print("\n2Ô∏è‚É£ UPLOADING FILE TO STORAGE")
    print("-" * 40)
    
    async with httpx.AsyncClient() as client:
        # Create test content
        test_content = b"This is a test file for worker path access test"
        
        # Extract key from generated path
        file_key = generated_path.split('files/')[1]
        print(f"Uploading to key: {file_key}")
        
        # Upload to Supabase storage
        upload_response = await client.post(
            f"{SUPABASE_URL}/storage/v1/object/files/{file_key}",
            headers={
                "Authorization": f"Bearer {SERVICE_ROLE_KEY}",
                "Content-Type": "application/pdf"
            },
            content=test_content
        )
        
        print(f"Upload status: {upload_response.status_code}")
        if upload_response.status_code not in [200, 201, 204]:
            print(f"‚ùå Upload failed: {upload_response.text}")
            return
        
        print("‚úÖ File uploaded successfully")
        
        # Step 3: Test worker-style file access
        print("\n3Ô∏è‚É£ TESTING WORKER-STYLE FILE ACCESS")
        print("-" * 40)
        
        # Simulate what the worker does - check if file exists
        file_access_response = await client.get(
            f"{SUPABASE_URL}/storage/v1/object/files/{file_key}",
            headers={
                "Authorization": f"Bearer {SERVICE_ROLE_KEY}"
            }
        )
        
        print(f"File access status: {file_access_response.status_code}")
        if file_access_response.status_code == 200:
            print("‚úÖ File accessible by worker")
            print(f"File size: {len(file_access_response.content)} bytes")
        else:
            print(f"‚ùå File not accessible by worker: {file_access_response.text}")
            return
        
        # Step 4: Test with different path formats
        print("\n4Ô∏è‚É£ TESTING DIFFERENT PATH FORMATS")
        print("-" * 40)
        
        # Test old format (timestamp-based)
        old_format_path = f"files/user/{test_user_id}/raw/12345678_{test_document_id[:8]}.pdf"
        old_file_key = old_format_path.split('files/')[1]
        
        print(f"Testing old format path: {old_format_path}")
        old_access_response = await client.get(
            f"{SUPABASE_URL}/storage/v1/object/files/{old_file_key}",
            headers={
                "Authorization": f"Bearer {SERVICE_ROLE_KEY}"
            }
        )
        print(f"Old format access status: {old_access_response.status_code}")
        
        # Test new format (deterministic)
        new_format_path = generated_path
        new_file_key = new_format_path.split('files/')[1]
        
        print(f"Testing new format path: {new_format_path}")
        new_access_response = await client.get(
            f"{SUPABASE_URL}/storage/v1/object/files/{new_file_key}",
            headers={
                "Authorization": f"Bearer {SERVICE_ROLE_KEY}"
            }
        )
        print(f"New format access status: {new_access_response.status_code}")
        
        # Step 5: Test LlamaParse-style access
        print("\n5Ô∏è‚É£ TESTING LLAMAPARSE-STYLE ACCESS")
        print("-" * 40)
        
        # LlamaParse might be using a different URL format
        llamaparse_url = f"{SUPABASE_URL}/storage/v1/object/files/{file_key}"
        print(f"LlamaParse URL: {llamaparse_url}")
        
        llamaparse_response = await client.get(
            llamaparse_url,
            headers={
                "Authorization": f"Bearer {SERVICE_ROLE_KEY}"
            }
        )
        
        print(f"LlamaParse access status: {llamaparse_response.status_code}")
        if llamaparse_response.status_code == 200:
            print("‚úÖ File accessible by LlamaParse")
        else:
            print(f"‚ùå File not accessible by LlamaParse: {llamaparse_response.text}")
        
        # Step 6: Check what files actually exist
        print("\n6Ô∏è‚É£ CHECKING ACTUAL STORAGE CONTENTS")
        print("-" * 40)
        
        # List files in the user's raw directory
        list_response = await client.get(
            f"{SUPABASE_URL}/storage/v1/object/list/files/user/{test_user_id}/raw",
            headers={
                "Authorization": f"Bearer {SERVICE_ROLE_KEY}"
            }
        )
        
        if list_response.status_code == 200:
            files = list_response.json()
            print(f"Found {len(files)} files in user/{test_user_id}/raw/:")
            for i, file_info in enumerate(files):
                file_name = file_info.get('name', 'Unknown')
                print(f"  {i+1}. {file_name}")
                
                # Check if this matches our generated path
                if file_name == generated_path.split('/')[-1]:
                    print(f"     ‚úÖ Matches our generated path")
                else:
                    print(f"     ‚ùå Does not match our generated path")
        else:
            print(f"‚ùå Failed to list files: {list_response.text}")
    
    print("\n" + "=" * 50)
    print("üéØ WORKER PATH TEST COMPLETE")
    print("=" * 50)

if __name__ == "__main__":
    asyncio.run(test_worker_path_access())
